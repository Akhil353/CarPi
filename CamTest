import cv2
import numpy as np
from CAM import CameraMonitor

def draw_blindspots(frame, blindspots):
    for spot in blindspots:
        x1, y1, x2, y2 = spot["bbox"]
        cause = spot["cause"]
        label = f"{cause}"
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
        cv2.putText(frame, label, (x1 + 2, y1 - 5),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
    return frame

def main():
    monitor = CameraMonitor()
    cap = cv2.VideoCapture(0)

    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    cap.set(cv2.CAP_PROP_FPS, 30)

    print("üîç Starting Calibrator Monitor (press 'q' to quit)...")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("‚ùå Failed to read frame.")
            break

        is_drift, distance, blindspots = monitor.process_frame(frame)

        status_text = f"{'‚ö†Ô∏è Drift' if is_drift else '‚úÖ Stable'} | Distance = {distance:.2f}"
        color = (0, 0, 255) if is_drift else (0, 255, 0)

        annotated = frame.copy()
        if blindspots:
            annotated = draw_blindspots(annotated, blindspots)

        cv2.putText(annotated, status_text, (10, 25),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)

        cv2.imshow("Camera Blindspot Monitor", annotated)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            print("üõë Quitting.")
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
